  name: "Terraform Workflow"
  on:
    workflow_call:
      inputs:
        envireoment:
          type: string
          required: true
        aws-assume-role-arn:
          type: string
          required: true
        aws-region:
          type: string
          required: true 
        aws-lock-dynamodb-table:
          type: string
          required: true
        aws-statefile-s3bucket:
          type: string
          required: true


  jobs:
    terraform:
      runs-on: ubuntu-lastest
      defaults:
        runs: 
          shell: bash
    
      steps:
        - name: Checkout code
          uses: actions/checkput@v4
          with:
            terraform_version: 1.8.3
        - name: Configure aws credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: ${{ inputs.aws-assume-role-arn}}
            role-session-name: GitHub_to_AWS_via_FederatedODIC
            aws-region: ${{ inputs.aws-region }}

        - name: Read destroy configuration
          id: read-destroy-config
          run: |
            DESTROY="$(jq -r '.${{ inputs.environment }}' ./infra/destroy_config.json)"
            echo "destroy=$(echo $DESTROY)" >> $GITHUB_OUTPUT
        - name: terraform init
          run: | 
            cd infra && terraform init \
            -backend-config="bucket=${{ inputs.aws-statefile-s3-bucket }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ inputs.aws-region }}" \
            -backend-config="dynamodb_tables=${{ inputs.aws-lock-dynamodb-tlable }}"

        - name: Terraform Validate
          run: terraform Validate
        
        - name: Terraform destroy
          if: steps.read-destroy-config.outputs.destroy == 'true'
          id: terraform-destroy
          run: cd infra &&
            terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
            terraform destroy -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -out="${{ inputs.environment }}.plan"
        - name: Terraform Apply
          if: steps.read-destroy-config.outputs.destroy != 'true'
          id: terraform-apply
          run: cd infra &&
            terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
            terraform-apply "${{ inputs.environment }}.plan"    

